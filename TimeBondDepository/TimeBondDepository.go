// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TimeBondDepository

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TimeBondDepositoryMetaData contains all meta data concerning the TimeBondDepository contract.
var TimeBondDepositoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Time\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Time\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"buffer\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vesting\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_vestingTerm\",\"type\":\"uint32\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_buffer\",\"type\":\"uint32\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumTimeBondDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestingTerm\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101406040523480156200001257600080fd5b5060405162002ec238038062002ec2833981810160405260a08110156200003857600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b031916331780825593519596949592949391926001600160a01b0392909216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36001600160a01b038516620000b557600080fd5b6001600160601b0319606086901b166080526001600160a01b038416620000db57600080fd5b6001600160601b0319606085901b1660a0526001600160a01b0383166200010157600080fd5b6001600160601b0319606084901b1660c0526001600160a01b0382166200012757600080fd5b6001600160601b0319606092831b811660e0529181901b909116610120526001600160a01b0316151560f81b6101005250505060805160601c60a05160601c60c05160601c60e05160601c6101005160f81c6101205160601c612c946200022e60003980610e54528061160f5280611956525080610e2652806115de5280611c5c52508061144f52806116d852806118a3525080610db052806110bd52806112c152806113a35250806105d55280610e835280610f2a52806110ec528061126852806112925280611372528061163e528061186152508061142d528061182252806119af5280611cd15280611dc15280611e945280611f79528061208e5250612c946000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638dbdbe6d11610125578063d4d863ce116100ad578063e0176de81161007c578063e0176de814610592578063e392a2621461059a578063f5c2ab5b146105a2578063f8e157ea146105c3578063fc7b9c18146105cb57610211565b8063d4d863ce14610513578063d502562514610541578063d796906014610582578063d7ccfb0b1461058a57610211565b8063b4abccba116100f4578063b4abccba14610444578063c5332b7c1461046a578063cd1234b314610472578063cea55f57146104c4578063cf37a891146104cc57610211565b80638dbdbe6d146103cb578063904b3ece146103fd57806398fabd3a14610405578063ae9832cf1461040d57610211565b806346f68ee9116101a857806361d027b31161017757806361d027b31461038e578063759076e51461039657806377b818951461039e5780637927ebf8146103a6578063844b5c7c146103c357610211565b806346f68ee9146103325780634cf088d914610358578063507930ec146103605780635a96ac0a1461038657610211565b80631e321a0f116101e45780631e321a0f146102845780631feed31f146102aa5780632f3f470a146102d8578063451ee4a1146102f457610211565b8063016a42841461021657806301b88ee81461023a5780630505c8c914610272578063089208d81461027a575b600080fd5b61021e6105d3565b604080516001600160a01b039092168252519081900360200190f35b6102606004803603602081101561025057600080fd5b50356001600160a01b03166105f7565b60408051918252519081900360200190f35b61021e610650565b610282610660565b005b6102826004803603604081101561029a57600080fd5b5060ff81351690602001356106f7565b610260600480360360408110156102c057600080fd5b506001600160a01b03813516906020013515156108da565b6102e0610b2a565b604080519115158252519081900360200190f35b6102fc610b3a565b60408051951515865260208601949094528484019290925263ffffffff9081166060850152166080830152519081900360a00190f35b6102826004803603602081101561034857600080fd5b50356001600160a01b0316610b60565b61021e610c4d565b6102606004803603602081101561037657600080fd5b50356001600160a01b0316610c5c565b610282610d04565b61021e610dae565b610260610dd2565b61021e610ded565b610260600480360360208110156103bc57600080fd5b5035610dfc565b610260610e22565b610260600480360360608110156103e157600080fd5b50803590602081013590604001356001600160a01b0316610fbb565b6102606115da565b61021e6116d6565b6102826004803603608081101561042357600080fd5b5080351515906020810135906040810135906060013563ffffffff166116fa565b6102e06004803603602081101561045a57600080fd5b50356001600160a01b031661181e565b61021e611954565b6104986004803603602081101561048857600080fd5b50356001600160a01b0316611978565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b6102606119aa565b610282600480360360e08110156104e257600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c0013563ffffffff16611a62565b6102826004803603604081101561052957600080fd5b506001600160a01b0381351690602001351515611b7c565b610549611c3f565b604080519687526020870195909552858501939093526060850191909152608084015263ffffffff1660a0830152519081900360c00190f35b6102e0611c5a565b610260611c7e565b610260611cbd565b610260611d5a565b6105aa611db3565b6040805163ffffffff9092168252519081900360200190f35b61021e611dbf565b610260611de3565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061060383610c5c565b6001600160a01b0384166000908152600e6020526040902054909150612710821061063057809250610649565b6106466127106106408385611de9565b90611e49565b92505b5050919050565b6000546001600160a01b03165b90565b6000546001600160a01b031633146106ad576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610744576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b600082600481111561075257fe5b14156107b4576201fa4081101561079a5760405162461bcd60e51b8152600401808060200182810382526024815260200180612c116024913960400191505060405180910390fd5b6009805463ffffffff191663ffffffff83161790556108d6565b60018260048111156107c257fe5b1415610829576103e881111561081f576040805162461bcd60e51b815260206004820181905260248201527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604482015290519081900360640190fd5b60068190556108d6565b600282600481111561083757fe5b141561089e57612710811115610894576040805162461bcd60e51b815260206004820152601c60248201527f44414f206665652063616e6e6f7420657863656564207061796f757400000000604482015290519081900360640190fd5b60078190556108d6565b60038260048111156108ac57fe5b14156108bc5760088190556108d6565b60048260048111156108ca57fe5b14156108d65760058190555b5050565b60006108e4612af8565b506001600160a01b0383166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff80821692840192909252600160201b90041660608201529061094285610c5c565b905061271081106109d7576001600160a01b0385166000818152600e6020908152604080832083815560018101849055600201805467ffffffffffffffff19169055855181519081529182019290925281517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1929181900390910190a26109ce85858460000151611e8b565b92505050610b24565b81516000906109ee90612710906106409085611de9565b90506040518060800160405280610a1283866000015161218f90919063ffffffff16565b8152602001846020015181526020014263ffffffff168152602001610a66610a4d86604001514263ffffffff166121d190919063ffffffff16565b866060015163ffffffff166121d190919063ffffffff16565b63ffffffff9081169091526001600160a01b0388166000818152600e6020908152604091829020855180825586830151600183015586840151600290920180546060909801518716600160201b0267ffffffff00000000199390971663ffffffff19909816979097179190911694909417909455805185815293840192909252815190927f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b192908290030190a2610b1e868683611e8b565b93505050505b92915050565b600354600160a01b900460ff1681565b600a54600b54600c54600d5460ff9093169263ffffffff80821691600160201b90041685565b6000546001600160a01b03163314610bad576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b6001600160a01b038116610bf25760405162461bcd60e51b8152600401808060200182810382526026815260200180612b3f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6000610c66612af8565b506001600160a01b0382166000908152600e602090815260408083208151608081018352815481526001820154938101939093526002015463ffffffff808216928401839052600160201b90910481166060840152919291610ccc914282169161218f16565b606083015190915063ffffffff168015610cf757610cf08161064084612710611de9565b9350610cfc565b600093505b505050919050565b6001546001600160a01b03163314610d4d5760405162461bcd60e51b8152600401808060200182810382526022815260200180612b656022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610de8610ddf611d5a565b600f549061218f565b905090565b6003546001600160a01b031681565b6000610b24662386f26fc10000610640610e1d85610e18611c7e565b612213565b61238a565b60007f000000000000000000000000000000000000000000000000000000000000000015610f2057610f1960646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610edf57600080fd5b505afa158015610ef3573d6000803e3d6000fd5b505050506040513d6020811015610f0957600080fd5b5051610f13611c7e565b90611de9565b905061065d565b610de860646106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b505160ff16600a0a610f13611c7e565b60006001600160a01b03821661100a576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6110126123a2565b600854600f541115611062576040805162461bcd60e51b815260206004820152601460248201527313585e0818d85c1858da5d1e481c995858da195960621b604482015290519081900360640190fd5b600061106c610e22565b905060006110786123c7565b9050808510156110b95760405162461bcd60e51b8152600401808060200182810382526023815260200180612bee6023913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631eec5a9a7f0000000000000000000000000000000000000000000000000000000000000000896040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b15801561115057600080fd5b505afa158015611164573d6000803e3d6000fd5b505050506040513d602081101561117a57600080fd5b50519050600061118982610dfc565b9050629896808110156111d4576040805162461bcd60e51b815260206004820152600e60248201526d109bdb99081d1bdbc81cdb585b1b60921b604482015290519081900360640190fd5b6111dc611cbd565b811115611221576040805162461bcd60e51b815260206004820152600e60248201526d426f6e6420746f6f206c6172676560901b604482015290519081900360640190fd5b600061124161271061064060046003015485611de990919063ffffffff16565b9050600061125982611253868661218f565b9061218f565b90506112906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308d612409565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008c6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561132757600080fd5b505af115801561133b573d6000803e3d6000fd5b505050506040513d602081101561135157600080fd5b50506040805163bc157ac160e01b8152600481018c90526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905291517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b1580156113ee57600080fd5b505af1158015611402573d6000803e3d6000fd5b505050506040513d602081101561141857600080fd5b50508115611474576114746001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612469565b600f5461148190856124c0565b600f55604080516080810182526001600160a01b038a166000908152600e602052919091205481906114b390866124c0565b8152602080820189905263ffffffff428181166040808601919091526009805484166060968701526001600160a01b038f166000908152600e865282902087518155948701516001860155908601516002909401805496909501518316600160201b0267ffffffff000000001994841663ffffffff1990971696909617939093169490941790925554889261154d9290918116906124c016565b604080518d8152905186917f1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5919081900360200190a461158b6119aa565b6115936123c7565b61159b610e22565b6040517f375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a90600090a46115cc61251a565b509098975050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000156116ce57610f19633b9aca006106407f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332da80a37f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561169a57600080fd5b505afa1580156116ae573d6000803e3d6000fd5b505050506040513d60208110156116c457600080fd5b5051610f136119aa565b610f196119aa565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03163314611747576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b60045461175d906103e890610640906019611de9565b8311156117a7576040805162461bcd60e51b8152602060048201526013602482015272496e6372656d656e7420746f6f206c6172676560681b604482015290519081900360640190fd5b6040805160a0810182529415158086526020860185905290850183905263ffffffff91821660608601819052429092166080909501859052600a805460ff19169091179055600b92909255600c55600d805463ffffffff191690911767ffffffff000000001916600160201b909202919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561185f57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561189e57600080fd5b61194c7f0000000000000000000000000000000000000000000000000000000000000000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561190f57600080fd5b505afa158015611923573d6000803e3d6000fd5b505050506040513d602081101561193957600080fd5b50516001600160a01b0385169190612469565b506001919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e6020526000908152604090208054600182015460029092015490919063ffffffff80821691600160201b90041684565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0657600080fd5b505afa158015611a1a573d6000803e3d6000fd5b505050506040513d6020811015611a3057600080fd5b50519050611a5c670de0b6b3a7640000610640610e1d611a56633b9aca00610f13610dd2565b85612213565b91505090565b6000546001600160a01b03163314611aaf576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b60045415611b04576040805162461bcd60e51b815260206004820181905260248201527f426f6e6473206d75737420626520696e697469616c697a65642066726f6d2030604482015290519081900360640190fd5b6040805160c08101825288815260208101889052908101869052606081018590526080810184905263ffffffff91821660a09091018190526004979097556005959095556006939093556007919091556008556009805463ffffffff199081169094179055600f556010805490921642909116179055565b6000546001600160a01b03163314611bc9576040805162461bcd60e51b81526020600482018190526024820152600080516020612bce833981519152604482015290519081900360640190fd5b6001600160a01b038216611bdc57600080fd5b8015611c115760038054600160a01b60ff60a01b19909116176001600160a01b0319166001600160a01b0384161790556108d6565b6003805460ff60a01b19169055600280546001600160a01b0384166001600160a01b03199091161790555050565b60045460055460065460075460085460095463ffffffff1686565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611ca962989680610640633b9aca00611ca3611c9a6119aa565b60045490611de9565b906124c0565b60055490915081101561065d575060055490565b6000610de8620186a06106406004600201547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2857600080fd5b505afa158015611d3c573d6000803e3d6000fd5b505050506040513d6020811015611d5257600080fd5b505190611de9565b6010546000908190611d789063ffffffff428116918116906121d116565b600954600f54919250611d9d9163ffffffff91821691610640919080861690611de916565b9150600f54821115611daf57600f5491505b5090565b60105463ffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f5481565b600082611df857506000610b24565b82820282848281611e0557fe5b0414611e425760405162461bcd60e51b8152600401808060200182810382526021815260200180612bad6021913960400191505060405180910390fd5b9392505050565b6000611e4283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612625565b600082611f3b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611f0957600080fd5b505af1158015611f1d573d6000803e3d6000fd5b505050506040513d6020811015611f3357600080fd5b506121889050565b600354600160a01b900460ff1615612062576003546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b158015611fc457600080fd5b505af1158015611fd8573d6000803e3d6000fd5b505050506040513d6020811015611fee57600080fd5b505060035460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb775791604480830192600092919082900301818387803b15801561204557600080fd5b505af1158015612059573d6000803e3d6000fd5b50505050612188565b6002546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810185905290517f00000000000000000000000000000000000000000000000000000000000000009092169163095ea7b3916044808201926020929091908290030181600087803b1580156120d957600080fd5b505af11580156120ed573d6000803e3d6000fd5b505050506040513d602081101561210357600080fd5b505060025460408051637acb775760e01b8152600481018590526001600160a01b03878116602483015291519190921691637acb77579160448083019260209291908290030181600087803b15801561215b57600080fd5b505af115801561216f573d6000803e3d6000fd5b505050506040513d602081101561218557600080fd5b50505b5092915050565b6000611e4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126c7565b6000611e4283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612721565b61221b612b2c565b6000821161225a5760405162461bcd60e51b8152600401808060200182810382526026815260200180612b876026913960400191505060405180910390fd5b826122745750604080516020810190915260008152610b24565b71ffffffffffffffffffffffffffffffffffff831161231b57600082607085901b8161229c57fe5b0490506001600160e01b038111156122fb576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050610b24565b600061232c84600160701b85612780565b90506001600160e01b038111156122fb576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b6123ad610ddf611d5a565b600f556010805463ffffffff19164263ffffffff16179055565b60006123e362989680610640633b9aca00611ca3611c9a6119aa565b6005549091508110156123f9575060055461065d565b6005541561065d57600060055590565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612463908590612820565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526124bb908490612820565b505050565b600082820183811015611e42576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600d5460009061253c9063ffffffff600160201b82048116918116906124c016565b600b54909150158015906125505750804210155b1561262257600454600a5460ff161561258a57600b54600454612572916124c0565b6004819055600c5411612585576000600b555b6125ac565b600b546004546125999161218f565b6004819055600c54106125ac576000600b555b600d805467ffffffff000000001916600160201b4263ffffffff1602179055600454600b54600a546040805185815260208101949094528381019290925260ff1615156060830152517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a916080908290030190a1505b50565b600081836126b15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561267657818101518382015260200161265e565b50505050905090810190601f1680156126a35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816126bd57fe5b0495945050505050565b600081848411156127195760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561267657818101518382015260200161265e565b505050900390565b60008363ffffffff168363ffffffff16111582906127195760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561267657818101518382015260200161265e565b600080600061278f86866128d1565b915091506000848061279d57fe5b8688099050828111156127b1576001820391505b808303925084821061280a576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b6128158383876128fe565b979650505050505050565b6060612875826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661296e9092919063ffffffff16565b8051909150156124bb5780806020019051602081101561289457600080fd5b50516124bb5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c35602a913960400191505060405180910390fd5b60008080600019848609905083850292508281039150828110156128f6576001820391505b509250929050565b6000818103821680838161290e57fe5b04925080858161291a57fe5b04945080816000038161292957fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b606061297d8484600085612985565b949350505050565b606061299085612af2565b6129e1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612a205780518252601f199092019160209182019101612a01565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612a82576040519150601f19603f3d011682016040523d82523d6000602084013e612a87565b606091505b50915091508115612a9b57915061297d9050565b805115612aab5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561267657818101518382015260200161265e565b3b151590565b60405180608001604052806000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b6040805160208101909152600081529056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572536c697070616765206c696d69743a206d6f7265207468616e206d617820707269636556657374696e67206d757374206265206c6f6e676572207468616e20333620686f7572735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208feb059ef57d7c1360862daf0e7c0e96229c779e7a10f205e6b5a1143c9d2f4064736f6c63430007050033000000000000000000000000b54f16fb19478766a268f172c9480f8da1a7c9c3000000000000000000000000130966628846bfd36ff31a822705796e8cb8c18d0000000000000000000000001c46450211cb2646cc1da3c5242422967ed9e04c00000000000000000000000078a9e536ebda08b5b9edbe5785c9d1d50fa3278c0000000000000000000000000000000000000000000000000000000000000000",
}

// TimeBondDepositoryABI is the input ABI used to generate the binding from.
// Deprecated: Use TimeBondDepositoryMetaData.ABI instead.
var TimeBondDepositoryABI = TimeBondDepositoryMetaData.ABI

// TimeBondDepositoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TimeBondDepositoryMetaData.Bin instead.
var TimeBondDepositoryBin = TimeBondDepositoryMetaData.Bin

// DeployTimeBondDepository deploys a new Ethereum contract, binding an instance of TimeBondDepository to it.
func DeployTimeBondDepository(auth *bind.TransactOpts, backend bind.ContractBackend, _Time common.Address, _principle common.Address, _treasury common.Address, _DAO common.Address, _bondCalculator common.Address) (common.Address, *types.Transaction, *TimeBondDepository, error) {
	parsed, err := TimeBondDepositoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TimeBondDepositoryBin), backend, _Time, _principle, _treasury, _DAO, _bondCalculator)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TimeBondDepository{TimeBondDepositoryCaller: TimeBondDepositoryCaller{contract: contract}, TimeBondDepositoryTransactor: TimeBondDepositoryTransactor{contract: contract}, TimeBondDepositoryFilterer: TimeBondDepositoryFilterer{contract: contract}}, nil
}

// TimeBondDepository is an auto generated Go binding around an Ethereum contract.
type TimeBondDepository struct {
	TimeBondDepositoryCaller     // Read-only binding to the contract
	TimeBondDepositoryTransactor // Write-only binding to the contract
	TimeBondDepositoryFilterer   // Log filterer for contract events
}

// TimeBondDepositoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TimeBondDepositoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimeBondDepositoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TimeBondDepositoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimeBondDepositoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TimeBondDepositoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TimeBondDepositorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TimeBondDepositorySession struct {
	Contract     *TimeBondDepository // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TimeBondDepositoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TimeBondDepositoryCallerSession struct {
	Contract *TimeBondDepositoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TimeBondDepositoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TimeBondDepositoryTransactorSession struct {
	Contract     *TimeBondDepositoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TimeBondDepositoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TimeBondDepositoryRaw struct {
	Contract *TimeBondDepository // Generic contract binding to access the raw methods on
}

// TimeBondDepositoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TimeBondDepositoryCallerRaw struct {
	Contract *TimeBondDepositoryCaller // Generic read-only contract binding to access the raw methods on
}

// TimeBondDepositoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TimeBondDepositoryTransactorRaw struct {
	Contract *TimeBondDepositoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTimeBondDepository creates a new instance of TimeBondDepository, bound to a specific deployed contract.
func NewTimeBondDepository(address common.Address, backend bind.ContractBackend) (*TimeBondDepository, error) {
	contract, err := bindTimeBondDepository(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepository{TimeBondDepositoryCaller: TimeBondDepositoryCaller{contract: contract}, TimeBondDepositoryTransactor: TimeBondDepositoryTransactor{contract: contract}, TimeBondDepositoryFilterer: TimeBondDepositoryFilterer{contract: contract}}, nil
}

// NewTimeBondDepositoryCaller creates a new read-only instance of TimeBondDepository, bound to a specific deployed contract.
func NewTimeBondDepositoryCaller(address common.Address, caller bind.ContractCaller) (*TimeBondDepositoryCaller, error) {
	contract, err := bindTimeBondDepository(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryCaller{contract: contract}, nil
}

// NewTimeBondDepositoryTransactor creates a new write-only instance of TimeBondDepository, bound to a specific deployed contract.
func NewTimeBondDepositoryTransactor(address common.Address, transactor bind.ContractTransactor) (*TimeBondDepositoryTransactor, error) {
	contract, err := bindTimeBondDepository(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryTransactor{contract: contract}, nil
}

// NewTimeBondDepositoryFilterer creates a new log filterer instance of TimeBondDepository, bound to a specific deployed contract.
func NewTimeBondDepositoryFilterer(address common.Address, filterer bind.ContractFilterer) (*TimeBondDepositoryFilterer, error) {
	contract, err := bindTimeBondDepository(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryFilterer{contract: contract}, nil
}

// bindTimeBondDepository binds a generic wrapper to an already deployed contract.
func bindTimeBondDepository(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TimeBondDepositoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TimeBondDepository *TimeBondDepositoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TimeBondDepository.Contract.TimeBondDepositoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TimeBondDepository *TimeBondDepositoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.TimeBondDepositoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TimeBondDepository *TimeBondDepositoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.TimeBondDepositoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TimeBondDepository *TimeBondDepositoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TimeBondDepository.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TimeBondDepository *TimeBondDepositoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TimeBondDepository *TimeBondDepositoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.contract.Transact(opts, method, params...)
}

// DAO is a free data retrieval call binding the contract method 0x98fabd3a.
//
// Solidity: function DAO() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) DAO(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "DAO")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DAO is a free data retrieval call binding the contract method 0x98fabd3a.
//
// Solidity: function DAO() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) DAO() (common.Address, error) {
	return _TimeBondDepository.Contract.DAO(&_TimeBondDepository.CallOpts)
}

// DAO is a free data retrieval call binding the contract method 0x98fabd3a.
//
// Solidity: function DAO() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) DAO() (common.Address, error) {
	return _TimeBondDepository.Contract.DAO(&_TimeBondDepository.CallOpts)
}

// Time is a free data retrieval call binding the contract method 0xf8e157ea.
//
// Solidity: function Time() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) Time(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "Time")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Time is a free data retrieval call binding the contract method 0xf8e157ea.
//
// Solidity: function Time() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) Time() (common.Address, error) {
	return _TimeBondDepository.Contract.Time(&_TimeBondDepository.CallOpts)
}

// Time is a free data retrieval call binding the contract method 0xf8e157ea.
//
// Solidity: function Time() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Time() (common.Address, error) {
	return _TimeBondDepository.Contract.Time(&_TimeBondDepository.CallOpts)
}

// Adjustment is a free data retrieval call binding the contract method 0x451ee4a1.
//
// Solidity: function adjustment() view returns(bool add, uint256 rate, uint256 target, uint32 buffer, uint32 lastTime)
func (_TimeBondDepository *TimeBondDepositoryCaller) Adjustment(opts *bind.CallOpts) (struct {
	Add      bool
	Rate     *big.Int
	Target   *big.Int
	Buffer   uint32
	LastTime uint32
}, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "adjustment")

	outstruct := new(struct {
		Add      bool
		Rate     *big.Int
		Target   *big.Int
		Buffer   uint32
		LastTime uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Add = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Rate = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Target = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Buffer = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.LastTime = *abi.ConvertType(out[4], new(uint32)).(*uint32)

	return *outstruct, err

}

// Adjustment is a free data retrieval call binding the contract method 0x451ee4a1.
//
// Solidity: function adjustment() view returns(bool add, uint256 rate, uint256 target, uint32 buffer, uint32 lastTime)
func (_TimeBondDepository *TimeBondDepositorySession) Adjustment() (struct {
	Add      bool
	Rate     *big.Int
	Target   *big.Int
	Buffer   uint32
	LastTime uint32
}, error) {
	return _TimeBondDepository.Contract.Adjustment(&_TimeBondDepository.CallOpts)
}

// Adjustment is a free data retrieval call binding the contract method 0x451ee4a1.
//
// Solidity: function adjustment() view returns(bool add, uint256 rate, uint256 target, uint32 buffer, uint32 lastTime)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Adjustment() (struct {
	Add      bool
	Rate     *big.Int
	Target   *big.Int
	Buffer   uint32
	LastTime uint32
}, error) {
	return _TimeBondDepository.Contract.Adjustment(&_TimeBondDepository.CallOpts)
}

// BondCalculator is a free data retrieval call binding the contract method 0xc5332b7c.
//
// Solidity: function bondCalculator() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) BondCalculator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "bondCalculator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BondCalculator is a free data retrieval call binding the contract method 0xc5332b7c.
//
// Solidity: function bondCalculator() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) BondCalculator() (common.Address, error) {
	return _TimeBondDepository.Contract.BondCalculator(&_TimeBondDepository.CallOpts)
}

// BondCalculator is a free data retrieval call binding the contract method 0xc5332b7c.
//
// Solidity: function bondCalculator() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) BondCalculator() (common.Address, error) {
	return _TimeBondDepository.Contract.BondCalculator(&_TimeBondDepository.CallOpts)
}

// BondInfo is a free data retrieval call binding the contract method 0xcd1234b3.
//
// Solidity: function bondInfo(address ) view returns(uint256 payout, uint256 pricePaid, uint32 lastTime, uint32 vesting)
func (_TimeBondDepository *TimeBondDepositoryCaller) BondInfo(opts *bind.CallOpts, arg0 common.Address) (struct {
	Payout    *big.Int
	PricePaid *big.Int
	LastTime  uint32
	Vesting   uint32
}, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "bondInfo", arg0)

	outstruct := new(struct {
		Payout    *big.Int
		PricePaid *big.Int
		LastTime  uint32
		Vesting   uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Payout = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PricePaid = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.LastTime = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.Vesting = *abi.ConvertType(out[3], new(uint32)).(*uint32)

	return *outstruct, err

}

// BondInfo is a free data retrieval call binding the contract method 0xcd1234b3.
//
// Solidity: function bondInfo(address ) view returns(uint256 payout, uint256 pricePaid, uint32 lastTime, uint32 vesting)
func (_TimeBondDepository *TimeBondDepositorySession) BondInfo(arg0 common.Address) (struct {
	Payout    *big.Int
	PricePaid *big.Int
	LastTime  uint32
	Vesting   uint32
}, error) {
	return _TimeBondDepository.Contract.BondInfo(&_TimeBondDepository.CallOpts, arg0)
}

// BondInfo is a free data retrieval call binding the contract method 0xcd1234b3.
//
// Solidity: function bondInfo(address ) view returns(uint256 payout, uint256 pricePaid, uint32 lastTime, uint32 vesting)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) BondInfo(arg0 common.Address) (struct {
	Payout    *big.Int
	PricePaid *big.Int
	LastTime  uint32
	Vesting   uint32
}, error) {
	return _TimeBondDepository.Contract.BondInfo(&_TimeBondDepository.CallOpts, arg0)
}

// BondPrice is a free data retrieval call binding the contract method 0xd7ccfb0b.
//
// Solidity: function bondPrice() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositoryCaller) BondPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "bondPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BondPrice is a free data retrieval call binding the contract method 0xd7ccfb0b.
//
// Solidity: function bondPrice() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositorySession) BondPrice() (*big.Int, error) {
	return _TimeBondDepository.Contract.BondPrice(&_TimeBondDepository.CallOpts)
}

// BondPrice is a free data retrieval call binding the contract method 0xd7ccfb0b.
//
// Solidity: function bondPrice() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) BondPrice() (*big.Int, error) {
	return _TimeBondDepository.Contract.BondPrice(&_TimeBondDepository.CallOpts)
}

// BondPriceInUSD is a free data retrieval call binding the contract method 0x844b5c7c.
//
// Solidity: function bondPriceInUSD() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositoryCaller) BondPriceInUSD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "bondPriceInUSD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BondPriceInUSD is a free data retrieval call binding the contract method 0x844b5c7c.
//
// Solidity: function bondPriceInUSD() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositorySession) BondPriceInUSD() (*big.Int, error) {
	return _TimeBondDepository.Contract.BondPriceInUSD(&_TimeBondDepository.CallOpts)
}

// BondPriceInUSD is a free data retrieval call binding the contract method 0x844b5c7c.
//
// Solidity: function bondPriceInUSD() view returns(uint256 price_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) BondPriceInUSD() (*big.Int, error) {
	return _TimeBondDepository.Contract.BondPriceInUSD(&_TimeBondDepository.CallOpts)
}

// CurrentDebt is a free data retrieval call binding the contract method 0x759076e5.
//
// Solidity: function currentDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCaller) CurrentDebt(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "currentDebt")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentDebt is a free data retrieval call binding the contract method 0x759076e5.
//
// Solidity: function currentDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) CurrentDebt() (*big.Int, error) {
	return _TimeBondDepository.Contract.CurrentDebt(&_TimeBondDepository.CallOpts)
}

// CurrentDebt is a free data retrieval call binding the contract method 0x759076e5.
//
// Solidity: function currentDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) CurrentDebt() (*big.Int, error) {
	return _TimeBondDepository.Contract.CurrentDebt(&_TimeBondDepository.CallOpts)
}

// DebtDecay is a free data retrieval call binding the contract method 0xe392a262.
//
// Solidity: function debtDecay() view returns(uint256 decay_)
func (_TimeBondDepository *TimeBondDepositoryCaller) DebtDecay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "debtDecay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtDecay is a free data retrieval call binding the contract method 0xe392a262.
//
// Solidity: function debtDecay() view returns(uint256 decay_)
func (_TimeBondDepository *TimeBondDepositorySession) DebtDecay() (*big.Int, error) {
	return _TimeBondDepository.Contract.DebtDecay(&_TimeBondDepository.CallOpts)
}

// DebtDecay is a free data retrieval call binding the contract method 0xe392a262.
//
// Solidity: function debtDecay() view returns(uint256 decay_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) DebtDecay() (*big.Int, error) {
	return _TimeBondDepository.Contract.DebtDecay(&_TimeBondDepository.CallOpts)
}

// DebtRatio is a free data retrieval call binding the contract method 0xcea55f57.
//
// Solidity: function debtRatio() view returns(uint256 debtRatio_)
func (_TimeBondDepository *TimeBondDepositoryCaller) DebtRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "debtRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DebtRatio is a free data retrieval call binding the contract method 0xcea55f57.
//
// Solidity: function debtRatio() view returns(uint256 debtRatio_)
func (_TimeBondDepository *TimeBondDepositorySession) DebtRatio() (*big.Int, error) {
	return _TimeBondDepository.Contract.DebtRatio(&_TimeBondDepository.CallOpts)
}

// DebtRatio is a free data retrieval call binding the contract method 0xcea55f57.
//
// Solidity: function debtRatio() view returns(uint256 debtRatio_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) DebtRatio() (*big.Int, error) {
	return _TimeBondDepository.Contract.DebtRatio(&_TimeBondDepository.CallOpts)
}

// IsLiquidityBond is a free data retrieval call binding the contract method 0xd7969060.
//
// Solidity: function isLiquidityBond() view returns(bool)
func (_TimeBondDepository *TimeBondDepositoryCaller) IsLiquidityBond(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "isLiquidityBond")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsLiquidityBond is a free data retrieval call binding the contract method 0xd7969060.
//
// Solidity: function isLiquidityBond() view returns(bool)
func (_TimeBondDepository *TimeBondDepositorySession) IsLiquidityBond() (bool, error) {
	return _TimeBondDepository.Contract.IsLiquidityBond(&_TimeBondDepository.CallOpts)
}

// IsLiquidityBond is a free data retrieval call binding the contract method 0xd7969060.
//
// Solidity: function isLiquidityBond() view returns(bool)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) IsLiquidityBond() (bool, error) {
	return _TimeBondDepository.Contract.IsLiquidityBond(&_TimeBondDepository.CallOpts)
}

// LastDecay is a free data retrieval call binding the contract method 0xf5c2ab5b.
//
// Solidity: function lastDecay() view returns(uint32)
func (_TimeBondDepository *TimeBondDepositoryCaller) LastDecay(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "lastDecay")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LastDecay is a free data retrieval call binding the contract method 0xf5c2ab5b.
//
// Solidity: function lastDecay() view returns(uint32)
func (_TimeBondDepository *TimeBondDepositorySession) LastDecay() (uint32, error) {
	return _TimeBondDepository.Contract.LastDecay(&_TimeBondDepository.CallOpts)
}

// LastDecay is a free data retrieval call binding the contract method 0xf5c2ab5b.
//
// Solidity: function lastDecay() view returns(uint32)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) LastDecay() (uint32, error) {
	return _TimeBondDepository.Contract.LastDecay(&_TimeBondDepository.CallOpts)
}

// MaxPayout is a free data retrieval call binding the contract method 0xe0176de8.
//
// Solidity: function maxPayout() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCaller) MaxPayout(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "maxPayout")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxPayout is a free data retrieval call binding the contract method 0xe0176de8.
//
// Solidity: function maxPayout() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) MaxPayout() (*big.Int, error) {
	return _TimeBondDepository.Contract.MaxPayout(&_TimeBondDepository.CallOpts)
}

// MaxPayout is a free data retrieval call binding the contract method 0xe0176de8.
//
// Solidity: function maxPayout() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) MaxPayout() (*big.Int, error) {
	return _TimeBondDepository.Contract.MaxPayout(&_TimeBondDepository.CallOpts)
}

// PayoutFor is a free data retrieval call binding the contract method 0x7927ebf8.
//
// Solidity: function payoutFor(uint256 _value) view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCaller) PayoutFor(opts *bind.CallOpts, _value *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "payoutFor", _value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PayoutFor is a free data retrieval call binding the contract method 0x7927ebf8.
//
// Solidity: function payoutFor(uint256 _value) view returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) PayoutFor(_value *big.Int) (*big.Int, error) {
	return _TimeBondDepository.Contract.PayoutFor(&_TimeBondDepository.CallOpts, _value)
}

// PayoutFor is a free data retrieval call binding the contract method 0x7927ebf8.
//
// Solidity: function payoutFor(uint256 _value) view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) PayoutFor(_value *big.Int) (*big.Int, error) {
	return _TimeBondDepository.Contract.PayoutFor(&_TimeBondDepository.CallOpts, _value)
}

// PendingPayoutFor is a free data retrieval call binding the contract method 0x01b88ee8.
//
// Solidity: function pendingPayoutFor(address _depositor) view returns(uint256 pendingPayout_)
func (_TimeBondDepository *TimeBondDepositoryCaller) PendingPayoutFor(opts *bind.CallOpts, _depositor common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "pendingPayoutFor", _depositor)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingPayoutFor is a free data retrieval call binding the contract method 0x01b88ee8.
//
// Solidity: function pendingPayoutFor(address _depositor) view returns(uint256 pendingPayout_)
func (_TimeBondDepository *TimeBondDepositorySession) PendingPayoutFor(_depositor common.Address) (*big.Int, error) {
	return _TimeBondDepository.Contract.PendingPayoutFor(&_TimeBondDepository.CallOpts, _depositor)
}

// PendingPayoutFor is a free data retrieval call binding the contract method 0x01b88ee8.
//
// Solidity: function pendingPayoutFor(address _depositor) view returns(uint256 pendingPayout_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) PendingPayoutFor(_depositor common.Address) (*big.Int, error) {
	return _TimeBondDepository.Contract.PendingPayoutFor(&_TimeBondDepository.CallOpts, _depositor)
}

// PercentVestedFor is a free data retrieval call binding the contract method 0x507930ec.
//
// Solidity: function percentVestedFor(address _depositor) view returns(uint256 percentVested_)
func (_TimeBondDepository *TimeBondDepositoryCaller) PercentVestedFor(opts *bind.CallOpts, _depositor common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "percentVestedFor", _depositor)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PercentVestedFor is a free data retrieval call binding the contract method 0x507930ec.
//
// Solidity: function percentVestedFor(address _depositor) view returns(uint256 percentVested_)
func (_TimeBondDepository *TimeBondDepositorySession) PercentVestedFor(_depositor common.Address) (*big.Int, error) {
	return _TimeBondDepository.Contract.PercentVestedFor(&_TimeBondDepository.CallOpts, _depositor)
}

// PercentVestedFor is a free data retrieval call binding the contract method 0x507930ec.
//
// Solidity: function percentVestedFor(address _depositor) view returns(uint256 percentVested_)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) PercentVestedFor(_depositor common.Address) (*big.Int, error) {
	return _TimeBondDepository.Contract.PercentVestedFor(&_TimeBondDepository.CallOpts, _depositor)
}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) Policy(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "policy")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) Policy() (common.Address, error) {
	return _TimeBondDepository.Contract.Policy(&_TimeBondDepository.CallOpts)
}

// Policy is a free data retrieval call binding the contract method 0x0505c8c9.
//
// Solidity: function policy() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Policy() (common.Address, error) {
	return _TimeBondDepository.Contract.Policy(&_TimeBondDepository.CallOpts)
}

// Principle is a free data retrieval call binding the contract method 0x016a4284.
//
// Solidity: function principle() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) Principle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "principle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Principle is a free data retrieval call binding the contract method 0x016a4284.
//
// Solidity: function principle() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) Principle() (common.Address, error) {
	return _TimeBondDepository.Contract.Principle(&_TimeBondDepository.CallOpts)
}

// Principle is a free data retrieval call binding the contract method 0x016a4284.
//
// Solidity: function principle() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Principle() (common.Address, error) {
	return _TimeBondDepository.Contract.Principle(&_TimeBondDepository.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) Staking(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) Staking() (common.Address, error) {
	return _TimeBondDepository.Contract.Staking(&_TimeBondDepository.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Staking() (common.Address, error) {
	return _TimeBondDepository.Contract.Staking(&_TimeBondDepository.CallOpts)
}

// StakingHelper is a free data retrieval call binding the contract method 0x77b81895.
//
// Solidity: function stakingHelper() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) StakingHelper(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "stakingHelper")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingHelper is a free data retrieval call binding the contract method 0x77b81895.
//
// Solidity: function stakingHelper() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) StakingHelper() (common.Address, error) {
	return _TimeBondDepository.Contract.StakingHelper(&_TimeBondDepository.CallOpts)
}

// StakingHelper is a free data retrieval call binding the contract method 0x77b81895.
//
// Solidity: function stakingHelper() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) StakingHelper() (common.Address, error) {
	return _TimeBondDepository.Contract.StakingHelper(&_TimeBondDepository.CallOpts)
}

// StandardizedDebtRatio is a free data retrieval call binding the contract method 0x904b3ece.
//
// Solidity: function standardizedDebtRatio() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCaller) StandardizedDebtRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "standardizedDebtRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StandardizedDebtRatio is a free data retrieval call binding the contract method 0x904b3ece.
//
// Solidity: function standardizedDebtRatio() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) StandardizedDebtRatio() (*big.Int, error) {
	return _TimeBondDepository.Contract.StandardizedDebtRatio(&_TimeBondDepository.CallOpts)
}

// StandardizedDebtRatio is a free data retrieval call binding the contract method 0x904b3ece.
//
// Solidity: function standardizedDebtRatio() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) StandardizedDebtRatio() (*big.Int, error) {
	return _TimeBondDepository.Contract.StandardizedDebtRatio(&_TimeBondDepository.CallOpts)
}

// Terms is a free data retrieval call binding the contract method 0xd5025625.
//
// Solidity: function terms() view returns(uint256 controlVariable, uint256 minimumPrice, uint256 maxPayout, uint256 fee, uint256 maxDebt, uint32 vestingTerm)
func (_TimeBondDepository *TimeBondDepositoryCaller) Terms(opts *bind.CallOpts) (struct {
	ControlVariable *big.Int
	MinimumPrice    *big.Int
	MaxPayout       *big.Int
	Fee             *big.Int
	MaxDebt         *big.Int
	VestingTerm     uint32
}, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "terms")

	outstruct := new(struct {
		ControlVariable *big.Int
		MinimumPrice    *big.Int
		MaxPayout       *big.Int
		Fee             *big.Int
		MaxDebt         *big.Int
		VestingTerm     uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ControlVariable = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.MinimumPrice = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaxPayout = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.MaxDebt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.VestingTerm = *abi.ConvertType(out[5], new(uint32)).(*uint32)

	return *outstruct, err

}

// Terms is a free data retrieval call binding the contract method 0xd5025625.
//
// Solidity: function terms() view returns(uint256 controlVariable, uint256 minimumPrice, uint256 maxPayout, uint256 fee, uint256 maxDebt, uint32 vestingTerm)
func (_TimeBondDepository *TimeBondDepositorySession) Terms() (struct {
	ControlVariable *big.Int
	MinimumPrice    *big.Int
	MaxPayout       *big.Int
	Fee             *big.Int
	MaxDebt         *big.Int
	VestingTerm     uint32
}, error) {
	return _TimeBondDepository.Contract.Terms(&_TimeBondDepository.CallOpts)
}

// Terms is a free data retrieval call binding the contract method 0xd5025625.
//
// Solidity: function terms() view returns(uint256 controlVariable, uint256 minimumPrice, uint256 maxPayout, uint256 fee, uint256 maxDebt, uint32 vestingTerm)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Terms() (struct {
	ControlVariable *big.Int
	MinimumPrice    *big.Int
	MaxPayout       *big.Int
	Fee             *big.Int
	MaxDebt         *big.Int
	VestingTerm     uint32
}, error) {
	return _TimeBondDepository.Contract.Terms(&_TimeBondDepository.CallOpts)
}

// TotalDebt is a free data retrieval call binding the contract method 0xfc7b9c18.
//
// Solidity: function totalDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCaller) TotalDebt(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "totalDebt")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalDebt is a free data retrieval call binding the contract method 0xfc7b9c18.
//
// Solidity: function totalDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) TotalDebt() (*big.Int, error) {
	return _TimeBondDepository.Contract.TotalDebt(&_TimeBondDepository.CallOpts)
}

// TotalDebt is a free data retrieval call binding the contract method 0xfc7b9c18.
//
// Solidity: function totalDebt() view returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) TotalDebt() (*big.Int, error) {
	return _TimeBondDepository.Contract.TotalDebt(&_TimeBondDepository.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_TimeBondDepository *TimeBondDepositorySession) Treasury() (common.Address, error) {
	return _TimeBondDepository.Contract.Treasury(&_TimeBondDepository.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) Treasury() (common.Address, error) {
	return _TimeBondDepository.Contract.Treasury(&_TimeBondDepository.CallOpts)
}

// UseHelper is a free data retrieval call binding the contract method 0x2f3f470a.
//
// Solidity: function useHelper() view returns(bool)
func (_TimeBondDepository *TimeBondDepositoryCaller) UseHelper(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TimeBondDepository.contract.Call(opts, &out, "useHelper")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UseHelper is a free data retrieval call binding the contract method 0x2f3f470a.
//
// Solidity: function useHelper() view returns(bool)
func (_TimeBondDepository *TimeBondDepositorySession) UseHelper() (bool, error) {
	return _TimeBondDepository.Contract.UseHelper(&_TimeBondDepository.CallOpts)
}

// UseHelper is a free data retrieval call binding the contract method 0x2f3f470a.
//
// Solidity: function useHelper() view returns(bool)
func (_TimeBondDepository *TimeBondDepositoryCallerSession) UseHelper() (bool, error) {
	return _TimeBondDepository.Contract.UseHelper(&_TimeBondDepository.CallOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0x8dbdbe6d.
//
// Solidity: function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryTransactor) Deposit(opts *bind.TransactOpts, _amount *big.Int, _maxPrice *big.Int, _depositor common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "deposit", _amount, _maxPrice, _depositor)
}

// Deposit is a paid mutator transaction binding the contract method 0x8dbdbe6d.
//
// Solidity: function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) Deposit(_amount *big.Int, _maxPrice *big.Int, _depositor common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.Deposit(&_TimeBondDepository.TransactOpts, _amount, _maxPrice, _depositor)
}

// Deposit is a paid mutator transaction binding the contract method 0x8dbdbe6d.
//
// Solidity: function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) Deposit(_amount *big.Int, _maxPrice *big.Int, _depositor common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.Deposit(&_TimeBondDepository.TransactOpts, _amount, _maxPrice, _depositor)
}

// InitializeBondTerms is a paid mutator transaction binding the contract method 0xcf37a891.
//
// Solidity: function initializeBondTerms(uint256 _controlVariable, uint256 _minimumPrice, uint256 _maxPayout, uint256 _fee, uint256 _maxDebt, uint256 _initialDebt, uint32 _vestingTerm) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) InitializeBondTerms(opts *bind.TransactOpts, _controlVariable *big.Int, _minimumPrice *big.Int, _maxPayout *big.Int, _fee *big.Int, _maxDebt *big.Int, _initialDebt *big.Int, _vestingTerm uint32) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "initializeBondTerms", _controlVariable, _minimumPrice, _maxPayout, _fee, _maxDebt, _initialDebt, _vestingTerm)
}

// InitializeBondTerms is a paid mutator transaction binding the contract method 0xcf37a891.
//
// Solidity: function initializeBondTerms(uint256 _controlVariable, uint256 _minimumPrice, uint256 _maxPayout, uint256 _fee, uint256 _maxDebt, uint256 _initialDebt, uint32 _vestingTerm) returns()
func (_TimeBondDepository *TimeBondDepositorySession) InitializeBondTerms(_controlVariable *big.Int, _minimumPrice *big.Int, _maxPayout *big.Int, _fee *big.Int, _maxDebt *big.Int, _initialDebt *big.Int, _vestingTerm uint32) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.InitializeBondTerms(&_TimeBondDepository.TransactOpts, _controlVariable, _minimumPrice, _maxPayout, _fee, _maxDebt, _initialDebt, _vestingTerm)
}

// InitializeBondTerms is a paid mutator transaction binding the contract method 0xcf37a891.
//
// Solidity: function initializeBondTerms(uint256 _controlVariable, uint256 _minimumPrice, uint256 _maxPayout, uint256 _fee, uint256 _maxDebt, uint256 _initialDebt, uint32 _vestingTerm) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) InitializeBondTerms(_controlVariable *big.Int, _minimumPrice *big.Int, _maxPayout *big.Int, _fee *big.Int, _maxDebt *big.Int, _initialDebt *big.Int, _vestingTerm uint32) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.InitializeBondTerms(&_TimeBondDepository.TransactOpts, _controlVariable, _minimumPrice, _maxPayout, _fee, _maxDebt, _initialDebt, _vestingTerm)
}

// PullManagement is a paid mutator transaction binding the contract method 0x5a96ac0a.
//
// Solidity: function pullManagement() returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) PullManagement(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "pullManagement")
}

// PullManagement is a paid mutator transaction binding the contract method 0x5a96ac0a.
//
// Solidity: function pullManagement() returns()
func (_TimeBondDepository *TimeBondDepositorySession) PullManagement() (*types.Transaction, error) {
	return _TimeBondDepository.Contract.PullManagement(&_TimeBondDepository.TransactOpts)
}

// PullManagement is a paid mutator transaction binding the contract method 0x5a96ac0a.
//
// Solidity: function pullManagement() returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) PullManagement() (*types.Transaction, error) {
	return _TimeBondDepository.Contract.PullManagement(&_TimeBondDepository.TransactOpts)
}

// PushManagement is a paid mutator transaction binding the contract method 0x46f68ee9.
//
// Solidity: function pushManagement(address newOwner_) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) PushManagement(opts *bind.TransactOpts, newOwner_ common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "pushManagement", newOwner_)
}

// PushManagement is a paid mutator transaction binding the contract method 0x46f68ee9.
//
// Solidity: function pushManagement(address newOwner_) returns()
func (_TimeBondDepository *TimeBondDepositorySession) PushManagement(newOwner_ common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.PushManagement(&_TimeBondDepository.TransactOpts, newOwner_)
}

// PushManagement is a paid mutator transaction binding the contract method 0x46f68ee9.
//
// Solidity: function pushManagement(address newOwner_) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) PushManagement(newOwner_ common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.PushManagement(&_TimeBondDepository.TransactOpts, newOwner_)
}

// RecoverLostToken is a paid mutator transaction binding the contract method 0xb4abccba.
//
// Solidity: function recoverLostToken(address _token) returns(bool)
func (_TimeBondDepository *TimeBondDepositoryTransactor) RecoverLostToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "recoverLostToken", _token)
}

// RecoverLostToken is a paid mutator transaction binding the contract method 0xb4abccba.
//
// Solidity: function recoverLostToken(address _token) returns(bool)
func (_TimeBondDepository *TimeBondDepositorySession) RecoverLostToken(_token common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.RecoverLostToken(&_TimeBondDepository.TransactOpts, _token)
}

// RecoverLostToken is a paid mutator transaction binding the contract method 0xb4abccba.
//
// Solidity: function recoverLostToken(address _token) returns(bool)
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) RecoverLostToken(_token common.Address) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.RecoverLostToken(&_TimeBondDepository.TransactOpts, _token)
}

// Redeem is a paid mutator transaction binding the contract method 0x1feed31f.
//
// Solidity: function redeem(address _recipient, bool _stake) returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryTransactor) Redeem(opts *bind.TransactOpts, _recipient common.Address, _stake bool) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "redeem", _recipient, _stake)
}

// Redeem is a paid mutator transaction binding the contract method 0x1feed31f.
//
// Solidity: function redeem(address _recipient, bool _stake) returns(uint256)
func (_TimeBondDepository *TimeBondDepositorySession) Redeem(_recipient common.Address, _stake bool) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.Redeem(&_TimeBondDepository.TransactOpts, _recipient, _stake)
}

// Redeem is a paid mutator transaction binding the contract method 0x1feed31f.
//
// Solidity: function redeem(address _recipient, bool _stake) returns(uint256)
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) Redeem(_recipient common.Address, _stake bool) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.Redeem(&_TimeBondDepository.TransactOpts, _recipient, _stake)
}

// RenounceManagement is a paid mutator transaction binding the contract method 0x089208d8.
//
// Solidity: function renounceManagement() returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) RenounceManagement(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "renounceManagement")
}

// RenounceManagement is a paid mutator transaction binding the contract method 0x089208d8.
//
// Solidity: function renounceManagement() returns()
func (_TimeBondDepository *TimeBondDepositorySession) RenounceManagement() (*types.Transaction, error) {
	return _TimeBondDepository.Contract.RenounceManagement(&_TimeBondDepository.TransactOpts)
}

// RenounceManagement is a paid mutator transaction binding the contract method 0x089208d8.
//
// Solidity: function renounceManagement() returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) RenounceManagement() (*types.Transaction, error) {
	return _TimeBondDepository.Contract.RenounceManagement(&_TimeBondDepository.TransactOpts)
}

// SetAdjustment is a paid mutator transaction binding the contract method 0xae9832cf.
//
// Solidity: function setAdjustment(bool _addition, uint256 _increment, uint256 _target, uint32 _buffer) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) SetAdjustment(opts *bind.TransactOpts, _addition bool, _increment *big.Int, _target *big.Int, _buffer uint32) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "setAdjustment", _addition, _increment, _target, _buffer)
}

// SetAdjustment is a paid mutator transaction binding the contract method 0xae9832cf.
//
// Solidity: function setAdjustment(bool _addition, uint256 _increment, uint256 _target, uint32 _buffer) returns()
func (_TimeBondDepository *TimeBondDepositorySession) SetAdjustment(_addition bool, _increment *big.Int, _target *big.Int, _buffer uint32) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetAdjustment(&_TimeBondDepository.TransactOpts, _addition, _increment, _target, _buffer)
}

// SetAdjustment is a paid mutator transaction binding the contract method 0xae9832cf.
//
// Solidity: function setAdjustment(bool _addition, uint256 _increment, uint256 _target, uint32 _buffer) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) SetAdjustment(_addition bool, _increment *big.Int, _target *big.Int, _buffer uint32) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetAdjustment(&_TimeBondDepository.TransactOpts, _addition, _increment, _target, _buffer)
}

// SetBondTerms is a paid mutator transaction binding the contract method 0x1e321a0f.
//
// Solidity: function setBondTerms(uint8 _parameter, uint256 _input) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) SetBondTerms(opts *bind.TransactOpts, _parameter uint8, _input *big.Int) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "setBondTerms", _parameter, _input)
}

// SetBondTerms is a paid mutator transaction binding the contract method 0x1e321a0f.
//
// Solidity: function setBondTerms(uint8 _parameter, uint256 _input) returns()
func (_TimeBondDepository *TimeBondDepositorySession) SetBondTerms(_parameter uint8, _input *big.Int) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetBondTerms(&_TimeBondDepository.TransactOpts, _parameter, _input)
}

// SetBondTerms is a paid mutator transaction binding the contract method 0x1e321a0f.
//
// Solidity: function setBondTerms(uint8 _parameter, uint256 _input) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) SetBondTerms(_parameter uint8, _input *big.Int) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetBondTerms(&_TimeBondDepository.TransactOpts, _parameter, _input)
}

// SetStaking is a paid mutator transaction binding the contract method 0xd4d863ce.
//
// Solidity: function setStaking(address _staking, bool _helper) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactor) SetStaking(opts *bind.TransactOpts, _staking common.Address, _helper bool) (*types.Transaction, error) {
	return _TimeBondDepository.contract.Transact(opts, "setStaking", _staking, _helper)
}

// SetStaking is a paid mutator transaction binding the contract method 0xd4d863ce.
//
// Solidity: function setStaking(address _staking, bool _helper) returns()
func (_TimeBondDepository *TimeBondDepositorySession) SetStaking(_staking common.Address, _helper bool) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetStaking(&_TimeBondDepository.TransactOpts, _staking, _helper)
}

// SetStaking is a paid mutator transaction binding the contract method 0xd4d863ce.
//
// Solidity: function setStaking(address _staking, bool _helper) returns()
func (_TimeBondDepository *TimeBondDepositoryTransactorSession) SetStaking(_staking common.Address, _helper bool) (*types.Transaction, error) {
	return _TimeBondDepository.Contract.SetStaking(&_TimeBondDepository.TransactOpts, _staking, _helper)
}

// TimeBondDepositoryBondCreatedIterator is returned from FilterBondCreated and is used to iterate over the raw logs and unpacked data for BondCreated events raised by the TimeBondDepository contract.
type TimeBondDepositoryBondCreatedIterator struct {
	Event *TimeBondDepositoryBondCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryBondCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryBondCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryBondCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryBondCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryBondCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryBondCreated represents a BondCreated event raised by the TimeBondDepository contract.
type TimeBondDepositoryBondCreated struct {
	Deposit    *big.Int
	Payout     *big.Int
	Expires    *big.Int
	PriceInUSD *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBondCreated is a free log retrieval operation binding the contract event 0x1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5.
//
// Solidity: event BondCreated(uint256 deposit, uint256 indexed payout, uint256 indexed expires, uint256 indexed priceInUSD)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterBondCreated(opts *bind.FilterOpts, payout []*big.Int, expires []*big.Int, priceInUSD []*big.Int) (*TimeBondDepositoryBondCreatedIterator, error) {

	var payoutRule []interface{}
	for _, payoutItem := range payout {
		payoutRule = append(payoutRule, payoutItem)
	}
	var expiresRule []interface{}
	for _, expiresItem := range expires {
		expiresRule = append(expiresRule, expiresItem)
	}
	var priceInUSDRule []interface{}
	for _, priceInUSDItem := range priceInUSD {
		priceInUSDRule = append(priceInUSDRule, priceInUSDItem)
	}

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "BondCreated", payoutRule, expiresRule, priceInUSDRule)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryBondCreatedIterator{contract: _TimeBondDepository.contract, event: "BondCreated", logs: logs, sub: sub}, nil
}

// WatchBondCreated is a free log subscription operation binding the contract event 0x1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5.
//
// Solidity: event BondCreated(uint256 deposit, uint256 indexed payout, uint256 indexed expires, uint256 indexed priceInUSD)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchBondCreated(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryBondCreated, payout []*big.Int, expires []*big.Int, priceInUSD []*big.Int) (event.Subscription, error) {

	var payoutRule []interface{}
	for _, payoutItem := range payout {
		payoutRule = append(payoutRule, payoutItem)
	}
	var expiresRule []interface{}
	for _, expiresItem := range expires {
		expiresRule = append(expiresRule, expiresItem)
	}
	var priceInUSDRule []interface{}
	for _, priceInUSDItem := range priceInUSD {
		priceInUSDRule = append(priceInUSDRule, priceInUSDItem)
	}

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "BondCreated", payoutRule, expiresRule, priceInUSDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryBondCreated)
				if err := _TimeBondDepository.contract.UnpackLog(event, "BondCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondCreated is a log parse operation binding the contract event 0x1fec6dc81f140574bf43f6b1e420ae1dd47928b9d57db8cbd7b8611063b85ae5.
//
// Solidity: event BondCreated(uint256 deposit, uint256 indexed payout, uint256 indexed expires, uint256 indexed priceInUSD)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseBondCreated(log types.Log) (*TimeBondDepositoryBondCreated, error) {
	event := new(TimeBondDepositoryBondCreated)
	if err := _TimeBondDepository.contract.UnpackLog(event, "BondCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimeBondDepositoryBondPriceChangedIterator is returned from FilterBondPriceChanged and is used to iterate over the raw logs and unpacked data for BondPriceChanged events raised by the TimeBondDepository contract.
type TimeBondDepositoryBondPriceChangedIterator struct {
	Event *TimeBondDepositoryBondPriceChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryBondPriceChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryBondPriceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryBondPriceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryBondPriceChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryBondPriceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryBondPriceChanged represents a BondPriceChanged event raised by the TimeBondDepository contract.
type TimeBondDepositoryBondPriceChanged struct {
	PriceInUSD    *big.Int
	InternalPrice *big.Int
	DebtRatio     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterBondPriceChanged is a free log retrieval operation binding the contract event 0x375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a.
//
// Solidity: event BondPriceChanged(uint256 indexed priceInUSD, uint256 indexed internalPrice, uint256 indexed debtRatio)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterBondPriceChanged(opts *bind.FilterOpts, priceInUSD []*big.Int, internalPrice []*big.Int, debtRatio []*big.Int) (*TimeBondDepositoryBondPriceChangedIterator, error) {

	var priceInUSDRule []interface{}
	for _, priceInUSDItem := range priceInUSD {
		priceInUSDRule = append(priceInUSDRule, priceInUSDItem)
	}
	var internalPriceRule []interface{}
	for _, internalPriceItem := range internalPrice {
		internalPriceRule = append(internalPriceRule, internalPriceItem)
	}
	var debtRatioRule []interface{}
	for _, debtRatioItem := range debtRatio {
		debtRatioRule = append(debtRatioRule, debtRatioItem)
	}

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "BondPriceChanged", priceInUSDRule, internalPriceRule, debtRatioRule)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryBondPriceChangedIterator{contract: _TimeBondDepository.contract, event: "BondPriceChanged", logs: logs, sub: sub}, nil
}

// WatchBondPriceChanged is a free log subscription operation binding the contract event 0x375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a.
//
// Solidity: event BondPriceChanged(uint256 indexed priceInUSD, uint256 indexed internalPrice, uint256 indexed debtRatio)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchBondPriceChanged(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryBondPriceChanged, priceInUSD []*big.Int, internalPrice []*big.Int, debtRatio []*big.Int) (event.Subscription, error) {

	var priceInUSDRule []interface{}
	for _, priceInUSDItem := range priceInUSD {
		priceInUSDRule = append(priceInUSDRule, priceInUSDItem)
	}
	var internalPriceRule []interface{}
	for _, internalPriceItem := range internalPrice {
		internalPriceRule = append(internalPriceRule, internalPriceItem)
	}
	var debtRatioRule []interface{}
	for _, debtRatioItem := range debtRatio {
		debtRatioRule = append(debtRatioRule, debtRatioItem)
	}

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "BondPriceChanged", priceInUSDRule, internalPriceRule, debtRatioRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryBondPriceChanged)
				if err := _TimeBondDepository.contract.UnpackLog(event, "BondPriceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondPriceChanged is a log parse operation binding the contract event 0x375b221f40939bfd8f49723a17cf7bc6d576ebf72efe2cc3e991826f5b3f390a.
//
// Solidity: event BondPriceChanged(uint256 indexed priceInUSD, uint256 indexed internalPrice, uint256 indexed debtRatio)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseBondPriceChanged(log types.Log) (*TimeBondDepositoryBondPriceChanged, error) {
	event := new(TimeBondDepositoryBondPriceChanged)
	if err := _TimeBondDepository.contract.UnpackLog(event, "BondPriceChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimeBondDepositoryBondRedeemedIterator is returned from FilterBondRedeemed and is used to iterate over the raw logs and unpacked data for BondRedeemed events raised by the TimeBondDepository contract.
type TimeBondDepositoryBondRedeemedIterator struct {
	Event *TimeBondDepositoryBondRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryBondRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryBondRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryBondRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryBondRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryBondRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryBondRedeemed represents a BondRedeemed event raised by the TimeBondDepository contract.
type TimeBondDepositoryBondRedeemed struct {
	Recipient common.Address
	Payout    *big.Int
	Remaining *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBondRedeemed is a free log retrieval operation binding the contract event 0x51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1.
//
// Solidity: event BondRedeemed(address indexed recipient, uint256 payout, uint256 remaining)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterBondRedeemed(opts *bind.FilterOpts, recipient []common.Address) (*TimeBondDepositoryBondRedeemedIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "BondRedeemed", recipientRule)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryBondRedeemedIterator{contract: _TimeBondDepository.contract, event: "BondRedeemed", logs: logs, sub: sub}, nil
}

// WatchBondRedeemed is a free log subscription operation binding the contract event 0x51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1.
//
// Solidity: event BondRedeemed(address indexed recipient, uint256 payout, uint256 remaining)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchBondRedeemed(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryBondRedeemed, recipient []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "BondRedeemed", recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryBondRedeemed)
				if err := _TimeBondDepository.contract.UnpackLog(event, "BondRedeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBondRedeemed is a log parse operation binding the contract event 0x51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1.
//
// Solidity: event BondRedeemed(address indexed recipient, uint256 payout, uint256 remaining)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseBondRedeemed(log types.Log) (*TimeBondDepositoryBondRedeemed, error) {
	event := new(TimeBondDepositoryBondRedeemed)
	if err := _TimeBondDepository.contract.UnpackLog(event, "BondRedeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimeBondDepositoryControlVariableAdjustmentIterator is returned from FilterControlVariableAdjustment and is used to iterate over the raw logs and unpacked data for ControlVariableAdjustment events raised by the TimeBondDepository contract.
type TimeBondDepositoryControlVariableAdjustmentIterator struct {
	Event *TimeBondDepositoryControlVariableAdjustment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryControlVariableAdjustmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryControlVariableAdjustment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryControlVariableAdjustment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryControlVariableAdjustmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryControlVariableAdjustmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryControlVariableAdjustment represents a ControlVariableAdjustment event raised by the TimeBondDepository contract.
type TimeBondDepositoryControlVariableAdjustment struct {
	InitialBCV *big.Int
	NewBCV     *big.Int
	Adjustment *big.Int
	Addition   bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterControlVariableAdjustment is a free log retrieval operation binding the contract event 0xb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a.
//
// Solidity: event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment, bool addition)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterControlVariableAdjustment(opts *bind.FilterOpts) (*TimeBondDepositoryControlVariableAdjustmentIterator, error) {

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "ControlVariableAdjustment")
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryControlVariableAdjustmentIterator{contract: _TimeBondDepository.contract, event: "ControlVariableAdjustment", logs: logs, sub: sub}, nil
}

// WatchControlVariableAdjustment is a free log subscription operation binding the contract event 0xb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a.
//
// Solidity: event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment, bool addition)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchControlVariableAdjustment(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryControlVariableAdjustment) (event.Subscription, error) {

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "ControlVariableAdjustment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryControlVariableAdjustment)
				if err := _TimeBondDepository.contract.UnpackLog(event, "ControlVariableAdjustment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseControlVariableAdjustment is a log parse operation binding the contract event 0xb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a.
//
// Solidity: event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment, bool addition)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseControlVariableAdjustment(log types.Log) (*TimeBondDepositoryControlVariableAdjustment, error) {
	event := new(TimeBondDepositoryControlVariableAdjustment)
	if err := _TimeBondDepository.contract.UnpackLog(event, "ControlVariableAdjustment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimeBondDepositoryOwnershipPulledIterator is returned from FilterOwnershipPulled and is used to iterate over the raw logs and unpacked data for OwnershipPulled events raised by the TimeBondDepository contract.
type TimeBondDepositoryOwnershipPulledIterator struct {
	Event *TimeBondDepositoryOwnershipPulled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryOwnershipPulledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryOwnershipPulled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryOwnershipPulled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryOwnershipPulledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryOwnershipPulledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryOwnershipPulled represents a OwnershipPulled event raised by the TimeBondDepository contract.
type TimeBondDepositoryOwnershipPulled struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipPulled is a free log retrieval operation binding the contract event 0xaa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d.
//
// Solidity: event OwnershipPulled(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterOwnershipPulled(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TimeBondDepositoryOwnershipPulledIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "OwnershipPulled", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryOwnershipPulledIterator{contract: _TimeBondDepository.contract, event: "OwnershipPulled", logs: logs, sub: sub}, nil
}

// WatchOwnershipPulled is a free log subscription operation binding the contract event 0xaa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d.
//
// Solidity: event OwnershipPulled(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchOwnershipPulled(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryOwnershipPulled, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "OwnershipPulled", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryOwnershipPulled)
				if err := _TimeBondDepository.contract.UnpackLog(event, "OwnershipPulled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipPulled is a log parse operation binding the contract event 0xaa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d.
//
// Solidity: event OwnershipPulled(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseOwnershipPulled(log types.Log) (*TimeBondDepositoryOwnershipPulled, error) {
	event := new(TimeBondDepositoryOwnershipPulled)
	if err := _TimeBondDepository.contract.UnpackLog(event, "OwnershipPulled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TimeBondDepositoryOwnershipPushedIterator is returned from FilterOwnershipPushed and is used to iterate over the raw logs and unpacked data for OwnershipPushed events raised by the TimeBondDepository contract.
type TimeBondDepositoryOwnershipPushedIterator struct {
	Event *TimeBondDepositoryOwnershipPushed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TimeBondDepositoryOwnershipPushedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TimeBondDepositoryOwnershipPushed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TimeBondDepositoryOwnershipPushed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TimeBondDepositoryOwnershipPushedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TimeBondDepositoryOwnershipPushedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TimeBondDepositoryOwnershipPushed represents a OwnershipPushed event raised by the TimeBondDepository contract.
type TimeBondDepositoryOwnershipPushed struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipPushed is a free log retrieval operation binding the contract event 0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba.
//
// Solidity: event OwnershipPushed(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) FilterOwnershipPushed(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TimeBondDepositoryOwnershipPushedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TimeBondDepository.contract.FilterLogs(opts, "OwnershipPushed", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TimeBondDepositoryOwnershipPushedIterator{contract: _TimeBondDepository.contract, event: "OwnershipPushed", logs: logs, sub: sub}, nil
}

// WatchOwnershipPushed is a free log subscription operation binding the contract event 0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba.
//
// Solidity: event OwnershipPushed(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) WatchOwnershipPushed(opts *bind.WatchOpts, sink chan<- *TimeBondDepositoryOwnershipPushed, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TimeBondDepository.contract.WatchLogs(opts, "OwnershipPushed", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TimeBondDepositoryOwnershipPushed)
				if err := _TimeBondDepository.contract.UnpackLog(event, "OwnershipPushed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipPushed is a log parse operation binding the contract event 0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba.
//
// Solidity: event OwnershipPushed(address indexed previousOwner, address indexed newOwner)
func (_TimeBondDepository *TimeBondDepositoryFilterer) ParseOwnershipPushed(log types.Log) (*TimeBondDepositoryOwnershipPushed, error) {
	event := new(TimeBondDepositoryOwnershipPushed)
	if err := _TimeBondDepository.contract.UnpackLog(event, "OwnershipPushed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
